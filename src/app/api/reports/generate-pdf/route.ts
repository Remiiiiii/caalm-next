import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';
import { createAdminClient } from '@/lib/appwrite';
import { appwriteConfig } from '@/lib/appwrite/config';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { reportId, department, metrics, userRole, userName, aiContent } =
      body;

    if (
      !reportId ||
      !department ||
      !metrics ||
      !userRole ||
      !userName ||
      !aiContent
    ) {
      return NextResponse.json(
        { error: 'Missing required fields for PDF generation' },
        { status: 400 }
      );
    }

    // Create HTML content for the report
    const reportTitle = `${
      department === 'all' ? 'All Departments' : department
    } Analytics Report`;
    const reportDate = new Date().toLocaleDateString();

    const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${reportTitle}</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 40px;
            background-color: #ffffff;
            color: #333;
            line-height: 1.6;
        }
        .header {
            text-align: center;
            border-bottom: 3px solid #2563eb;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .header h1 {
            color: #2563eb;
            margin: 0;
            font-size: 28px;
            font-weight: 700;
        }
        .header h2 {
            color: #64748b;
            margin: 10px 0 0 0;
            font-size: 18px;
            font-weight: 400;
        }
        .metadata {
            background-color: #f8fafc;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
            border-left: 4px solid #2563eb;
        }
        .metadata p {
            margin: 5px 0;
            color: #475569;
        }
        .section {
            margin-bottom: 30px;
        }
        .section h3 {
            color: #1e293b;
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 15px;
            border-bottom: 2px solid #e2e8f0;
            padding-bottom: 8px;
        }
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .metric-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .metric-value {
            font-size: 32px;
            font-weight: 700;
            margin-bottom: 5px;
        }
        .metric-label {
            font-size: 14px;
            opacity: 0.9;
        }
        .content-box {
            background-color: #f8fafc;
            padding: 20px;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
        }
        .list-item {
            margin: 10px 0;
            padding-left: 20px;
            position: relative;
        }
        .list-item::before {
            content: "•";
            color: #2563eb;
            font-weight: bold;
            position: absolute;
            left: 0;
        }
        .footer {
            margin-top: 50px;
            padding-top: 20px;
            border-top: 2px solid #e2e8f0;
            text-align: center;
            color: #64748b;
            font-size: 12px;
        }
        @media print {
            body { margin: 0; }
            .header { page-break-after: avoid; }
            .section { page-break-inside: avoid; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>CAALM SOLUTIONS</h1>
        <h2>Healthcare Analytics & Management</h2>
    </div>

    <div class="metadata">
        <p><strong>Report Title:</strong> ${reportTitle}</p>
        <p><strong>Department:</strong> ${
          department === 'all' ? 'All Departments' : department
        }</p>
        <p><strong>Generated by:</strong> ${userName} (${userRole})</p>
        <p><strong>Generated on:</strong> ${reportDate}</p>
        <p><strong>Report ID:</strong> ${reportId}</p>
    </div>

    <div class="section">
        <h3>Executive Summary</h3>
        <div class="content-box">
            <p>This report provides a comprehensive overview of the performance across ${
              department === 'all' ? 'all departments' : department
            } within the healthcare organization. It analyzes key performance indicators (KPIs), identifies trends, assesses risks, and offers strategic recommendations for improvement.</p>
        </div>
    </div>

    <div class="section">
        <h3>Key Performance Indicators</h3>
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-value">${metrics.contracts}</div>
                <div class="metric-label">Total Contracts</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${metrics.users}</div>
                <div class="metric-label">Active Users</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${metrics.events}</div>
                <div class="metric-label">Scheduled Events</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">${metrics.files}</div>
                <div class="metric-label">Stored Files</div>
            </div>
        </div>
    </div>

    <div class="section">
        <h3>Department Analysis</h3>
        <div class="content-box">
            <p>Based on the current metrics, the organization is maintaining operational stability. The ${
              metrics.contracts
            } contracts indicate active vendor relationships, while ${
      metrics.users
    } active users suggest focused system utilization. The ${
      metrics.events
    } scheduled events demonstrate active engagement, and ${
      metrics.files
    } stored files show data management activity.</p>
        </div>
    </div>

    <div class="section">
        <h3>Risk Assessment & Compliance</h3>
        <div class="content-box">
            <div class="list-item">Data Security: Ensure HIPAA compliance for stored files</div>
            <div class="list-item">User Adoption: Monitor system utilization across departments</div>
            <div class="list-item">Contract Management: Track renewal dates and compliance status</div>
            <div class="list-item">System Performance: Monitor event scheduling efficiency</div>
        </div>
    </div>

    <div class="section">
        <h3>Strategic Recommendations</h3>
        <div class="content-box">
            <div class="list-item">Expand user training programs to increase system adoption</div>
            <div class="list-item">Implement automated contract renewal alerts</div>
            <div class="list-item">Enhance data governance policies for compliance</div>
            <div class="list-item">Conduct regular system performance reviews</div>
        </div>
    </div>

    <div class="section">
        <h3>AI-Powered Analysis</h3>
        <div class="content-box">
            <p>${aiContent
              .replace(/<[^>]*>/g, '')
              .replace(/&nbsp;/g, ' ')
              .replace(/\s+/g, ' ')
              .trim()}</p>
        </div>
    </div>

    <div class="footer">
        <p>© ${new Date().getFullYear()} CAALM Solutions. All rights reserved.</p>
        <p>This report was generated automatically by the CAALM Healthcare Analytics System</p>
    </div>
</body>
</html>`;

    // Store HTML file in the public directory
    const reportsDir = path.join(process.cwd(), 'public', 'reports');
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }

    const htmlFileName = `report_${reportId}.html`;
    const htmlPath = path.join(reportsDir, htmlFileName);

    fs.writeFileSync(htmlPath, htmlContent);

    // Try to update the report document with HTML file path if it exists
    try {
      const adminClient = await createAdminClient();
      await adminClient.databases.updateDocument(
        appwriteConfig.databaseId,
        appwriteConfig.reportsCollectionId,
        reportId,
        {
          pdfFilePath: `/reports/${htmlFileName}`,
          pdfGenerated: true,
        }
      );
    } catch (updateError) {
      console.log(
        'Report document not found, will be updated when report is created:',
        updateError
      );
      // This is not a critical error - the report file is still generated
    }

    return NextResponse.json({
      success: true,
      pdfPath: `/reports/${htmlFileName}`,
      message: 'Report generated successfully',
    });
  } catch (error) {
    console.error('Error generating report:', error);
    return NextResponse.json(
      {
        error: 'Failed to generate report',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}
