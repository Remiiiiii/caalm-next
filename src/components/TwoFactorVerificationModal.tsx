'use client';

import React, { useState } from 'react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSlot,
} from '@/components/ui/input-otp';
import Image from 'next/image';
import { Button } from './ui/button';
import { Shield, RefreshCw } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface TwoFactorVerificationModalProps {
  userId: string;
  email: string;
  onSuccess: () => void;
  onClose: () => void;
}

const TwoFactorVerificationModal = ({
  userId,
  onSuccess,
  onClose,
}: TwoFactorVerificationModalProps) => {
  const [isOpen, setIsOpen] = useState(true);
  const [otp, setOtp] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [attempts, setAttempts] = useState(0);
  const { toast } = useToast();

  const handleVerify = async () => {
    if (!otp || otp.length !== 6) {
      setError('Please enter a 6-digit verification code');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const response = await fetch('/api/2fa/verify', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,
          code: otp,
        }),
      });

      const data = await response.json();

      if (data.success) {
        toast({
          title: '2FA Verification Successful',
          description: 'Welcome back!',
        });
        onSuccess();
      } else {
        setAttempts((prev) => prev + 1);
        if (attempts >= 2) {
          // 3 attempts total
          toast({
            title: 'Too Many Failed Attempts',
            description: 'TOTP verification failed. Please try again later.',
            variant: 'destructive',
          });
          onClose();
          return;
        }
        setError(data.error || 'Invalid verification code. Please try again.');
      }
    } catch (error) {
      console.error('Failed to verify 2FA', error);
      setError('Failed to verify 2FA. Please try again later.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendCode = async () => {
    // For 2FA, we don't resend codes - they're generated by the authenticator app
    // But we can show a helpful message
    toast({
      title: '2FA Code',
      description: 'Please check your authenticator app for the current code.',
    });
  };

  return (
    <AlertDialog open={isOpen} onOpenChange={setIsOpen}>
      <AlertDialogContent className="shad-alert-dialog">
        <AlertDialogHeader className="relative flex justify-center">
          <AlertDialogTitle className="h2 text-center flex items-center gap-2">
            <Shield className="h-5 w-5 text-blue-500" />
            Two-Factor Authentication
            <Image
              src="/assets/icons/close-dark.svg"
              alt="close"
              width={20}
              height={20}
              className="otp-close-button"
              onClick={() => {
                setIsOpen(false);
                onClose();
              }}
            />
          </AlertDialogTitle>
          <AlertDialogDescription className="subtitle-2 text-center">
            Enter the 6-digit code from your authenticator app
          </AlertDialogDescription>
        </AlertDialogHeader>

        <InputOTP maxLength={6} value={otp} onChange={setOtp}>
          <InputOTPGroup className="shad-otp">
            <InputOTPSlot index={0} className="shad-otp-slot" />
            <InputOTPSlot index={1} className="shad-otp-slot" />
            <InputOTPSlot index={2} className="shad-otp-slot" />
            <InputOTPSlot index={3} className="shad-otp-slot" />
            <InputOTPSlot index={4} className="shad-otp-slot" />
            <InputOTPSlot index={5} className="shad-otp-slot" />
          </InputOTPGroup>
        </InputOTP>

        {error && (
          <div className="text-red-500 text-center text-sm">{error}</div>
        )}

        {attempts > 0 && (
          <div className="text-orange-600 text-center text-sm">
            Failed attempts: {attempts}/3
          </div>
        )}

        <AlertDialogFooter>
          <div className="flex w-full flex-col gap-4">
            <AlertDialogAction
              onClick={handleVerify}
              className="shad-submit-btn h-12"
              type="button"
              disabled={otp.length !== 6 || isLoading}
            >
              {isLoading ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Verifying...
                </>
              ) : (
                'Verify & Continue'
              )}
            </AlertDialogAction>
            <div className="subtitle-2 mt-2 text-center text-light-100">
              Need help?
              <Button
                type="button"
                variant="link"
                className="pl-1 text-brand"
                onClick={handleResendCode}
              >
                Check Authenticator App
              </Button>
            </div>
          </div>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
};

export default TwoFactorVerificationModal;
